{"name":"Xzharkz-simple-life-","body":"### This is Gui Game Over.java\r\n\r\n## I mainly focus on this because it has the respawn code and everything!\r\n\r\n`\r\n    /**\r\n     *\r\n     */\r\n\r\npackage net.minecraft.src;\r\n\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\n\r\nimport net.minecraft.client.Minecraft;\r\nimport org.lwjgl.opengl.GL11;\r\n\r\npublic class GuiGameOver extends GuiScreen\r\n{\r\n\t  public static void initGui(Object obj, String path)//Define method \"initGui\" and paramaters/arguments\r\n\t\t\t    throws Exception //Throws exception\r\n\t\t\t  {\r\n\t\t\t    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(path)); //New Object out stream \"oos\", Sends data to another location.\r\n\t\t\t    //Takes FileOutputStream as argument for type of output stream. File takes path arguement from initGui method\r\n\t\t\t    oos.writeObject(obj); //variable \"oos\" writes object to disk using path\r\n\t\t\t    oos.flush();//Clears output stream\r\n\t\t\t    oos.close();//Closes output\r\n\t\t\t  }\r\n\t\t\t  public static Object load(String path) //Define method \"Load\" and params\r\n\t\t\t  throws Exception //Throws exception\r\n\t\t\t  {\r\n\t\t\t    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(path));//New Object in stream \"ois\", gets data from another location and stores it in the object that uses it.\r\n\t\t\t    Object result = ois.readObject(); //define result as what ois reads from the file we give in \"path\"\r\n\t\t\t    ois.close(); //Closes stream\r\n\t\t\t    return result; //Returns result to object used to call.\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  \r\n\t\t\t\r\n    /**\r\n     * The cooldown timer for the buttons, increases every tick and enables all buttons when reaching 20.\r\n     */\r\n    private int cooldownTimer;\r\n\r\n    public GuiGameOver()\r\n    {\r\n    \t\r\n    }\r\n\r\n    /**\r\n     * Adds the buttons (and other controls) to the screen in question.\r\n     */\r\n    public void initGui()\r\n    {\r\n        controlList.clear();\r\n\r\n        if (mc.theWorld.getWorldInfo().isMapFeaturesEnabled())\r\n        {\r\n        \tcontrolList.add(new GuiButton(1, width / 2 - 100, height / 4 + 72, StatCollector.translateToLocal(\"deathScreen.respawn\")));\r\n            controlList.add(new GuiButton(2, width / 2 - 100, height / 4 + 96, StatCollector.translateToLocal(\"deathScreen.titleScreen\")));\r\n\r\n            controlList.add(new GuiButton(1, width / 2 - 100, height / 4 + 96, StatCollector.translateToLocal(\"deathScreen.deleteWorld\")));\r\n        }\r\n        else\r\n        {\r\n            controlList.add(new GuiButton(1, width / 2 - 100, height / 4 + 72, StatCollector.translateToLocal(\"deathScreen.respawn\")));\r\n            controlList.add(new GuiButton(2, width / 2 - 100, height / 4 + 96, StatCollector.translateToLocal(\"deathScreen.titleScreen\")));\r\n\r\n            if (mc.session == null)\r\n            {\r\n                ((GuiButton)controlList.get(1)).enabled = false;\r\n            }\r\n        }\r\n\r\n        for (Iterator iterator = controlList.iterator(); iterator.hasNext();)\r\n        {\r\n            GuiButton guibutton = (GuiButton)iterator.next();\r\n            guibutton.enabled = false;\r\n        }\r\n    }\r\n    \r\n    public void initGui1()\r\n    {\r\n        controlList.clear();\r\n\r\n        if (mc.theWorld.getWorldInfo().isHardcoreModeEnabled())\r\n        {\r\n            controlList.add(new GuiButton(1, width / 2 - 100, height / 4 + 96, StatCollector.translateToLocal(\"deathScreen.deleteWorld\")));\r\n        }\r\n        else\r\n        {\r\n            controlList.add(new GuiButton(1, width / 2 - 100, height / 4 + 72, StatCollector.translateToLocal(\"deathScreen.respawn\")));\r\n            controlList.add(new GuiButton(2, width / 2 - 100, height / 4 + 96, StatCollector.translateToLocal(\"deathScreen.titleScreen\")));\r\n\r\n            if (mc.session == null)\r\n            {\r\n                ((GuiButton)controlList.get(1)).enabled = false;\r\n            }\r\n        }\r\n\r\n        for (Iterator iterator = controlList.iterator(); iterator.hasNext();)\r\n        {\r\n            GuiButton guibutton = (GuiButton)iterator.next();\r\n            guibutton.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when a key is typed. This is the equivalent of KeyListener.keyTyped(KeyEvent e).\r\n     */\r\n    protected void keyTyped(char c, int i)\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).\r\n     */\r\n    protected void actionPerformed(GuiButton par1GuiButton)\r\n    {\r\n        if (par1GuiButton.id != 0);\r\n\r\n        if (par1GuiButton.id == 1)\r\n        {\r\n            if (mc.theWorld.getWorldInfo().isMapFeaturesEnabled())\r\n            {\r\n                World world = mc.theWorld;\r\n                mc.exitToMainMenu(\"Deleting world\");\r\n                ISaveFormat isaveformat = mc.getSaveLoader();\r\n                isaveformat.flushCache();\r\n                isaveformat.deleteWorldDirectory(world.getSaveHandler().getSaveDirectoryName());\r\n                mc.displayGuiScreen(new GuiMainMenu());\r\n            }\r\n            else\r\n            {\r\n                mc.thePlayer.respawnPlayer();\r\n                mc.displayGuiScreen(null);\r\n            }}\r\n        }\r\n        \r\n\r\n    /**\r\n     * Draws the screen and all the components in it.\r\n     */\r\n    public void drawScreen(int par1, int par2, float par3)\r\n    {\r\n        drawGradientRect(0, 0, width, height, 0x60500000, 0xa0803030);\r\n        GL11.glPushMatrix();\r\n        GL11.glScalef(2.0F, 2.0F, 2.0F);\r\n\r\n        if (mc.theWorld.getWorldInfo().isHardcoreModeEnabled())\r\n        {\r\n            drawCenteredString(fontRenderer, StatCollector.translateToLocal(\"deathScreen.title.hardcore\"), width / 2 / 2, 30, 0xffffff);\r\n        }\r\n        else\r\n        {\r\n            drawCenteredString(fontRenderer, StatCollector.translateToLocal(\"deathScreen.title\"), width / 2 / 2, 30, 0xffffff);\r\n        }\r\n\r\n        GL11.glPopMatrix();\r\n\r\n        if (mc.theWorld.getWorldInfo().isHardcoreModeEnabled())\r\n        {\r\n            drawCenteredString(fontRenderer, StatCollector.translateToLocal(\"deathScreen.hardcoreInfo\"), width / 2, 144, 0xffffff);\r\n        }\r\n\r\n        drawCenteredString(fontRenderer, (new StringBuilder()).append(StatCollector.translateToLocal(\"deathScreen.score\")).append(\": \\247e\").append(mc.thePlayer.getScore()).toString(), width / 2, 100, 0xffffff);\r\n        super.drawScreen(par1, par2, par3);\r\n    }\r\n\r\n    /**\r\n     * Returns true if this GUI should pause the game when it is displayed in single-player\r\n     */\r\n    public boolean doesGuiPauseGame()\r\n    {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Called from the main game loop to update the screen.\r\n     */\r\n    public void updateScreen()\r\n    {\r\n        super.updateScreen();\r\n        cooldownTimer++;\r\n\r\n        if (cooldownTimer == 20)\r\n        {\r\n            for (Iterator iterator = controlList.iterator(); iterator.hasNext();)\r\n            {\r\n                GuiButton guibutton = (GuiButton)iterator.next();\r\n                guibutton.enabled = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n`","tagline":"Only Me & Harry_baggs can use this section!!!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}